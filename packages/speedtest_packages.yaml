# speedtest_packages.yaml
# Source : https://github.com/WorldOfGZ/homeassistant-config
#
# ===============================
# Permet de réaliser des speedtests
#
# Paramétrage :
# Nécessite l'utilisation de speedtest CLI pour linux => https://www.speedtest.net/fr/apps/cli
# Décompresser les fichiers dans /3rdparty/speedtest (créer les dossiers si nécessaire)
#
# ===============================
# Entités créées :
#  Sensors :
#    sensor.speedtest_cli_data
#    sensor.speedtest_cli_ping
#    sensor.speedtest_cli_download
#    sensor.speedtest_cli_upload
#

# ===============================
# COMMAND LINE
# ===============================
command_line:
  #Réalisation du speedtest
  - sensor:
      name: "SpeedTest CLI Data"
      unique_id: speedtest_cli_data
      command: "/config/3rdparty/speedtest/speedtest --format=json --accept-license --accept-gdpr"
      #Toutes les 4 heures, 60 * 60 * 4 = 14400 /  3600 = 1 heure
      scan_interval: 3600
      command_timeout: 60
      value_template: >-
        {{ 
          { 
            "ping": value_json.ping.latency, 
            "download": value_json.download.bandwidth, 
            "upload": value_json.upload.bandwidth 
          }
          | to_json 
        }}

# ===============================
# TEMPLATE
# ===============================
template:
  #Met en forme le up / down / ping selon le résultat du scan obtenu
  - sensor:
    - name: 'SpeedTest CLI Ping'
      unique_id: speedtest_cli_ping
      icon: mdi:speedometer
      unit_of_measurement: ms
      state_class: measurement
      state: "{{ (states('sensor.speedtest_cli_data') | from_json).ping | round(2) }}"

    - name: 'SpeedTest CLI Download'
      unique_id: speedtest_cli_download
      icon: mdi:speedometer
      unit_of_measurement: Mbit/s
      state_class: measurement
      state: "{{ ((states('sensor.speedtest_cli_data') | from_json).download * 8 / 1000 / 1000) | round(2) }}"

    - name: 'SpeedTest CLI Upload'
      unique_id: speedtest_cli_upload
      icon: mdi:speedometer
      unit_of_measurement: Mbit/s
      state_class: measurement
      state: "{{ ((states('sensor.speedtest_cli_data') | from_json).upload * 8 / 1000 / 1000) | round(2) }}"